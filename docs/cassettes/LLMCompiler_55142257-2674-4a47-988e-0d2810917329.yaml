interactions:
- request:
    body: '{"messages": [{"content": "Given a user query, create a plan to solve it
      with the utmost parallelizability. Each plan should comprise an action from
      the following 3 types:\n1. tavily_search_results_json(query=\"the search query\")
      - a search engine.\n\n2. math(problem: str, context: Optional[list[str]]) ->
      float:\n - Solves the provided math problem.\n - `problem` can be either a simple
      math problem (e.g. \"1 + 3\") or a word problem (e.g. \"how many apples are
      there if there are 3 apples and 2 apples\").\n - You cannot calculate multiple
      expressions in one call. For instance, `math(''1 + 3, 2 + 4'')` does not work.
      If you need to calculate multiple expressions, you need to call them separately
      like `math(''1 + 3'')` and then `math(''2 + 4'')`\n - Minimize the number of
      `math` actions as much as possible. For instance, instead of calling 2. math(\"what
      is the 10% of $1\") and then call 3. math(\"$1 + $2\"), you MUST call 2. math(\"what
      is the 110% of $1\") instead, which will reduce the number of math actions.\n
      - You can optionally provide a list of strings as `context` to help the agent
      solve the problem. If there are multiple contexts you need to answer the question,
      you can provide them as a list of strings.\n - `math` action will not see the
      output of the previous actions unless you provide it as `context`. You MUST
      provide the output of the previous actions as `context` if you need to do math
      on it.\n - You MUST NEVER provide `search` type action''s outputs as a variable
      in the `problem` argument. This is because `search` returns a text blob that
      contains the information about the entity, not a number or value. Therefore,
      when you need to provide an output of `search` action, you MUST provide it as
      a `context` argument to `math` action. For example, 1. search(\"Barack Obama\")
      and then 2. math(\"age of $1\") is NEVER allowed. Use 2. math(\"age of Barack
      Obama\", context=[\"$1\"]) instead.\n - When you ask a question about `context`,
      specify the units. For instance, \"what is xx in height?\" or \"what is xx in
      millions?\" instead of \"what is xx?\"\n\n3. join(): Collects and combines results
      from prior actions.\n\n - An LLM agent is called upon invoking join() to either
      finalize the user query or wait until the plans are executed.\n - join should
      always be the last action in the plan, and will be called in two scenarios:\n   (a)
      if the answer can be determined by gathering the outputs from tasks to generate
      the final response.\n   (b) if the answer cannot be determined in the planning
      phase before you execute the plans. Guidelines:\n - Each action described above
      contains input/output types and description.\n    - You must strictly adhere
      to the input and output types for each action.\n    - The action descriptions
      contain the guidelines. You MUST strictly follow those guidelines when you use
      the actions.\n - Each action in the plan should strictly be one of the above
      types. Follow the Python conventions for each action.\n - Each action MUST have
      a unique ID, which is strictly increasing.\n - Inputs for actions can either
      be constants or outputs from preceding actions. In the latter case, use the
      format $id to denote the ID of the previous action whose output will be the
      input.\n - Always call join as the last action in the plan. Say ''<END_OF_PLAN>''
      after you call join\n - Ensure the plan maximizes parallelizability.\n - Only
      use the provided action types. If a query cannot be addressed using these, invoke
      the join action for the next steps.\n - Never introduce new actions other than
      the ones provided.", "role": "system"}, {"content": "What''s the temperature
      in SF raised to the 3rd power?", "role": "user"}, {"content": "Remember, ONLY
      respond with the task list in the correct format! E.g.:\nidx. tool(arg_name=args)",
      "role": "system"}], "model": "gpt-4-turbo-preview", "n": 1, "stream": true,
      "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3880'
      content-type:
      - application/json
      cookie:
      - __cf_bm=DxvKOcipR504YFIyOHWGMeMx9MY70WMcWGVSKy_wMmc-1726769508-1.0.1.1-LEjvtkNS0MATEtE3CPM00d9GzfdolnYEIjr2eKQNfp5xad3zOeHBwSkJheM8af6O8gfw8FSCoaLzfelV4Qd70g;
        _cfuvid=_YrqhyvdHQEYp8rjPEpqxVrE9zfcrbwD6yOMNtxZPiI-1726769508416-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.46.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.46.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: 'data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"role":"assistant","content":"","refusal":null},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"1"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"."},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        tav"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"ily"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"_search"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"_results"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"_json"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"(query"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"=\""},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"current"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        temperature"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        in"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        San"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        Francisco"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"\")\n"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"2"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"."},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        math"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"(problem"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"=\""},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"x"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        **"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        "},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"3"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"\","},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        context"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"=[\""},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"$"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"1"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"\"])\n"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"3"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"."},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"
        join"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"()<"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"END"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"_OF"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"_PLAN"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":">"},"logprobs":null,"finish_reason":null}]}


        data: {"id":"chatcmpl-A9Fv4lPXWzpWqDZe05AsNpJ8sLvSS","object":"chat.completion.chunk","created":1726769510,"model":"gpt-4-0125-preview","system_fingerprint":null,"choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}


        data: [DONE]


        '
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c5b8a5c2cc615b4-SJC
      Connection:
      - keep-alive
      Content-Type:
      - text/event-stream; charset=utf-8
      Date:
      - Thu, 19 Sep 2024 18:11:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - langchain
      openai-processing-ms:
      - '495'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1999072'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 27ms
      x-request-id:
      - req_351933b930354309badc6b329c48891d
    status:
      code: 200
      message: OK
- request:
    body: '{"api_key": "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", "query": "current
      temperature in San Francisco", "max_results": 1, "search_depth": "advanced",
      "include_domains": [], "exclude_domains": [], "include_answer": false, "include_raw_content":
      false, "include_images": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '273'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://api.tavily.com/search
  response:
    body:
      string: '{"query":"current temperature in San Francisco","follow_up_questions":null,"answer":null,"images":[],"results":[{"title":"San
        Francisco, CA Current Weather | AccuWeather","url":"https://www.accuweather.com/en/us/san-francisco/94103/current-weather/347629","content":"Current
        weather in San Francisco, CA. Check current conditions in San Francisco, CA
        with radar, hourly, and more.","score":0.56889486,"raw_content":null}],"response_time":2.11}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '443'
      Content-Type:
      - application/json
      Date:
      - Thu, 19 Sep 2024 18:11:54 GMT
      Server:
      - nginx
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Translate a math problem into a expression that
      can be executed using Python''s numexpr library. Use the output of running this
      code to answer the question.\n\nQuestion: ${Question with math problem.}\n```text\n${single
      line mathematical expression that solves the problem}\n```\n...numexpr.evaluate(text)...\n```output\n${Output
      of running the code}\n```\nAnswer: ${Answer}\n\nBegin.\n\nQuestion: What is
      37593 * 67?\nExecuteCode({code: \"37593 * 67\"})\n...numexpr.evaluate(\"37593
      * 67\")...\n```output\n2518731\n```\nAnswer: 2518731\n\nQuestion: 37593^(1/5)\nExecuteCode({code:
      \"37593**(1/5)\"})\n...numexpr.evaluate(\"37593**(1/5)\")...\n```output\n8.222831614237718\n```\nAnswer:
      8.222831614237718\n", "role": "system"}, {"content": "x ** 3", "role": "user"},
      {"content": "The following additional context is provided from other functions.    Use
      it to substitute into any ${#} variables or other words in the problem.    \n\n$[{''url'':
      ''https://www.accuweather.com/en/us/san-francisco/94103/current-weather/347629'',
      ''content'': ''Current weather in San Francisco, CA. Check current conditions
      in San Francisco, CA with radar, hourly, and more.''}]\n\nNote that context
      variables are not defined in code yet.You must extract the relevant numbers
      and directly put them in code.", "role": "system"}], "model": "gpt-4-turbo-preview",
      "n": 1, "parallel_tool_calls": false, "stream": false, "temperature": 0.7, "tool_choice":
      {"type": "function", "function": {"name": "ExecuteCode"}}, "tools": [{"type":
      "function", "function": {"name": "ExecuteCode", "description": "The input to
      the numexpr.evaluate() function.", "parameters": {"properties": {"reasoning":
      {"description": "The reasoning behind the code expression, including how context
      is included, if applicable.", "type": "string"}, "code": {"description": "The
      simple code expression to execute by numexpr.evaluate().", "type": "string"}},
      "required": ["reasoning", "code"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1977'
      content-type:
      - application/json
      cookie:
      - __cf_bm=phmhys2A4rvsap5g0sVZupClpEAO.fF8UQzGdjXEMrA-1726769507-1.0.1.1-ds6IkFaAtk6k4jeBDBc24nGkcA21Vfz7qqqAL3JUWMajiZhn8sLAmKz2qPC3pPzqvNaPKqkwo3oQUiICqBX7Vw;
        _cfuvid=9p3Hy7rkV2mUXjiAm9R0UlFxPI0uzx4KegwLB9kyJwo-1726769507126-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.46.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.46.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFPdb9owEH/nrzj5sQoVUKCDt320mzptD6vKJo0JGeeSmDo+y75AEOJ/
        n5zQQKstD5F159+Hzz8fegBCp2IOQhWSVelM//3sfvvubmEWs093xc3i89O3zYPZD/3Gf/j5JJKI
        oPUGFb+grhWVziBrsm1beZSMkXV4O5reTmeT4bhplJSiibDccX/cHwxHk77zuNW4OyEL0gqDmMPv
        HgDAoflHjzbFWsxhkLxUSgxB5ijm3SYA4cnEipAh6MDSskjOTUWW0UbbtjLmosFEZqWkMWfh9jtc
        rM+Dksasfn3d8Hby/R75YTD5ssvKH4t9tsf6Qq+l3rvGUFZZ1Q3oot/V52/EAISVZYO9q1FVjB8p
        xTdwACF9XpVoOVoXh6XwKANZbfOlmC/Fo7YKwRIEh0pnWsFWmgohIw816AC53qJNQNoUdpoLqhhk
        mupoSRpoJlYzMEGKmbYIdQJc6ABYO48haLKgpLXEsEZItUfFZg8YVWIEruGePKRYkg3sZaQFV3lH
        AUMCOoMdggyhKhHqqLJGkOCMVFiQSdGf7Br9jDBK4m4lbUcPI7i6gpvW3osEAhcI5LCVu16KZCkU
        pdgMpEUsxVG8GuSx96/1n4uMeMyqIM0pPKf6sUujodx5Woc34RKZtjoUq/ZW4hUFJtdqR51GQVSv
        giycp9LxiukZbSQcD8Ytnzg/tHN3Ojk1mViaC9R09j/UKkWWukl798C63JwZBp3N5pwi7ANjucq0
        zdE7r7un1Dv2/gIAAP//AwBRzTEPSQQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c5b8a7a1de26803-SJC
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 19 Sep 2024 18:11:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - langchain
      openai-processing-ms:
      - '2793'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1999688'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 9ms
      x-request-id:
      - req_82a7b91845a63cef3fc9c6f9f930c66c
    status:
      code: 200
      message: OK
version: 1
