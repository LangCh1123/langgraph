# serializer version: 1
# name: test_conditional_entrypoint_graph
  '{"title": "LangGraphInput"}'
# ---
# name: test_conditional_entrypoint_graph.1
  '{"title": "LangGraphOutput"}'
# ---
# name: test_conditional_entrypoint_graph.2
  '''
  {
    "nodes": [
      {
        "id": "__start__",
        "type": "schema",
        "data": "__start__"
      },
      {
        "id": "__end__",
        "type": "schema",
        "data": "__end__"
      },
      {
        "id": "left",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "left"
        }
      },
      {
        "id": "right",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "right"
        }
      }
    ],
    "edges": [
      {
        "source": "right",
        "target": "__end__"
      },
      {
        "source": "__start__",
        "target": "left",
        "data": "go-left",
        "conditional": true
      },
      {
        "source": "__start__",
        "target": "right",
        "data": "go-right",
        "conditional": true
      },
      {
        "source": "left",
        "target": "__end__",
        "conditional": true
      }
    ]
  }
  '''
# ---
# name: test_conditional_entrypoint_graph.3
  '''
  graph TD;
  	right --> __end__;
  	__start__ -. &nbspgo-left&nbsp .-> left;
  	__start__ -. &nbspgo-right&nbsp .-> right;
  	left -.-> __end__;
  
  '''
# ---
# name: test_conditional_entrypoint_to_multiple_state_graph
  '{"title": "LangGraphOutput", "type": "object", "properties": {"locations": {"title": "Locations", "type": "array", "items": {"type": "string"}}, "results": {"title": "Results", "type": "array", "items": {"type": "string"}}}}'
# ---
# name: test_conditional_entrypoint_to_multiple_state_graph.1
  '{"title": "LangGraphOutput", "type": "object", "properties": {"locations": {"title": "Locations", "type": "array", "items": {"type": "string"}}, "results": {"title": "Results", "type": "array", "items": {"type": "string"}}}}'
# ---
# name: test_conditional_entrypoint_to_multiple_state_graph.2
  '''
  {
    "nodes": [
      {
        "id": "__start__",
        "type": "schema",
        "data": "__start__"
      },
      {
        "id": "__end__",
        "type": "schema",
        "data": "__end__"
      },
      {
        "id": "get_weather",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "get_weather"
        }
      }
    ],
    "edges": [
      {
        "source": "get_weather",
        "target": "__end__"
      },
      {
        "source": "__start__",
        "target": "get_weather",
        "conditional": true
      },
      {
        "source": "__start__",
        "target": "__end__",
        "conditional": true
      }
    ]
  }
  '''
# ---
# name: test_conditional_entrypoint_to_multiple_state_graph.3
  '''
  graph TD;
  	get_weather --> __end__;
  	__start__ -.-> get_weather;
  	__start__ -.-> __end__;
  
  '''
# ---
# name: test_conditional_graph
  '''
  {
    "nodes": [
      {
        "id": "__start__",
        "type": "schema",
        "data": "__start__"
      },
      {
        "id": "__end__",
        "type": "schema",
        "data": "__end__"
      },
      {
        "id": "agent",
        "type": "runnable",
        "data": {
          "id": [
            "langchain",
            "schema",
            "runnable",
            "RunnableAssign"
          ],
          "name": "agent"
        }
      },
      {
        "id": "tools",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "tools"
        },
        "metadata": {
          "version": 2,
          "variant": "b"
        }
      }
    ],
    "edges": [
      {
        "source": "__start__",
        "target": "agent"
      },
      {
        "source": "tools",
        "target": "agent"
      },
      {
        "source": "agent",
        "target": "tools",
        "data": "continue",
        "conditional": true
      },
      {
        "source": "agent",
        "target": "__end__",
        "data": "exit",
        "conditional": true
      }
    ]
  }
  '''
# ---
# name: test_conditional_graph.1
  '''
  graph TD;
  	__start__ --> agent;
  	tools --> agent;
  	agent -. &nbspcontinue&nbsp .-> tools;
  	agent -. &nbspexit&nbsp .-> __end__;
  
  '''
# ---
# name: test_conditional_graph.2
  '''
  %%{init: {'flowchart': {'curve': 'linear'}}}%%
  graph TD;
  	__start__([__start__]):::first
  	__end__([__end__]):::last
  	agent(agent)
  	tools(tools<hr/><small><em>version = 2
  variant = b</em></small>)
  	__start__ --> agent;
  	tools --> agent;
  	agent -. &nbspcontinue&nbsp .-> tools;
  	agent -. &nbspexit&nbsp .-> __end__;
  	classDef default fill:#f2f0ff,line-height:1.2
  	classDef first fill-opacity:0
  	classDef last fill:#bfb6fc
  
  '''
# ---
# name: test_conditional_graph.3
  '''
  {
    "nodes": [
      {
        "id": "__start__",
        "type": "schema",
        "data": "__start__"
      },
      {
        "id": "__end__",
        "type": "schema",
        "data": "__end__"
      },
      {
        "id": 2,
        "type": "schema",
        "data": "Parallel<agent_outcome>Input"
      },
      {
        "id": 3,
        "type": "schema",
        "data": "Parallel<agent_outcome>Output"
      },
      {
        "id": 4,
        "type": "runnable",
        "data": {
          "id": [
            "langchain",
            "prompts",
            "prompt",
            "PromptTemplate"
          ],
          "name": "PromptTemplate"
        }
      },
      {
        "id": 5,
        "type": "runnable",
        "data": {
          "id": [
            "langchain_core",
            "language_models",
            "fake",
            "FakeStreamingListLLM"
          ],
          "name": "FakeStreamingListLLM"
        }
      },
      {
        "id": 6,
        "type": "runnable",
        "data": {
          "id": [
            "langchain_core",
            "runnables",
            "base",
            "RunnableLambda"
          ],
          "name": "agent_parser"
        }
      },
      {
        "id": 7,
        "type": "runnable",
        "data": {
          "id": [
            "langchain",
            "schema",
            "runnable",
            "RunnablePassthrough"
          ],
          "name": "Passthrough"
        }
      },
      {
        "id": "tools",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "tools"
        }
      }
    ],
    "edges": [
      {
        "source": 4,
        "target": 5
      },
      {
        "source": 5,
        "target": 6
      },
      {
        "source": 2,
        "target": 4
      },
      {
        "source": 6,
        "target": 3
      },
      {
        "source": 2,
        "target": 7
      },
      {
        "source": 7,
        "target": 3
      },
      {
        "source": "__start__",
        "target": 2
      },
      {
        "source": "tools",
        "target": 2
      },
      {
        "source": 3,
        "target": "tools",
        "data": "continue",
        "conditional": true
      },
      {
        "source": 3,
        "target": "__end__",
        "data": "exit",
        "conditional": true
      }
    ]
  }
  '''
# ---
# name: test_conditional_graph.4
  '''
  graph TD;
  	PromptTemplate --> FakeStreamingListLLM;
  	FakeStreamingListLLM --> agent_parser;
  	Parallel_agent_outcome_Input --> PromptTemplate;
  	agent_parser --> Parallel_agent_outcome_Output;
  	Parallel_agent_outcome_Input --> Passthrough;
  	Passthrough --> Parallel_agent_outcome_Output;
  	__start__ --> Parallel_agent_outcome_Input;
  	tools --> Parallel_agent_outcome_Input;
  	Parallel_agent_outcome_Output -. &nbspcontinue&nbsp .-> tools;
  	Parallel_agent_outcome_Output -. &nbspexit&nbsp .-> __end__;
  
  '''
# ---
# name: test_conditional_state_graph
  '{"title": "LangGraphOutput", "type": "object", "properties": {"input": {"title": "Input", "type": "string"}, "agent_outcome": {"title": "Agent Outcome", "anyOf": [{"$ref": "#/definitions/AgentAction"}, {"$ref": "#/definitions/AgentFinish"}]}, "intermediate_steps": {"title": "Intermediate Steps", "type": "array", "items": {"type": "array", "minItems": 2, "maxItems": 2, "items": [{"$ref": "#/definitions/AgentAction"}, {"type": "string"}]}}}, "definitions": {"AgentAction": {"title": "AgentAction", "description": "Represents a request to execute an action by an agent.\\n\\nThe action consists of the name of the tool to execute and the input to pass\\nto the tool. The log is used to pass along extra information about the action.", "type": "object", "properties": {"tool": {"title": "Tool", "type": "string"}, "tool_input": {"title": "Tool Input", "anyOf": [{"type": "string"}, {"type": "object"}]}, "log": {"title": "Log", "type": "string"}, "type": {"title": "Type", "default": "AgentAction", "enum": ["AgentAction"], "type": "string"}}, "required": ["tool", "tool_input", "log"]}, "AgentFinish": {"title": "AgentFinish", "description": "The final return value of an ActionAgent.\\n\\nAgents return an AgentFinish when they have reached a stopping condition.", "type": "object", "properties": {"return_values": {"title": "Return Values", "type": "object"}, "log": {"title": "Log", "type": "string"}, "type": {"title": "Type", "default": "AgentFinish", "enum": ["AgentFinish"], "type": "string"}}, "required": ["return_values", "log"]}}}'
# ---
# name: test_conditional_state_graph.1
  '{"title": "LangGraphOutput", "type": "object", "properties": {"input": {"title": "Input", "type": "string"}, "agent_outcome": {"title": "Agent Outcome", "anyOf": [{"$ref": "#/definitions/AgentAction"}, {"$ref": "#/definitions/AgentFinish"}]}, "intermediate_steps": {"title": "Intermediate Steps", "type": "array", "items": {"type": "array", "minItems": 2, "maxItems": 2, "items": [{"$ref": "#/definitions/AgentAction"}, {"type": "string"}]}}}, "definitions": {"AgentAction": {"title": "AgentAction", "description": "Represents a request to execute an action by an agent.\\n\\nThe action consists of the name of the tool to execute and the input to pass\\nto the tool. The log is used to pass along extra information about the action.", "type": "object", "properties": {"tool": {"title": "Tool", "type": "string"}, "tool_input": {"title": "Tool Input", "anyOf": [{"type": "string"}, {"type": "object"}]}, "log": {"title": "Log", "type": "string"}, "type": {"title": "Type", "default": "AgentAction", "enum": ["AgentAction"], "type": "string"}}, "required": ["tool", "tool_input", "log"]}, "AgentFinish": {"title": "AgentFinish", "description": "The final return value of an ActionAgent.\\n\\nAgents return an AgentFinish when they have reached a stopping condition.", "type": "object", "properties": {"return_values": {"title": "Return Values", "type": "object"}, "log": {"title": "Log", "type": "string"}, "type": {"title": "Type", "default": "AgentFinish", "enum": ["AgentFinish"], "type": "string"}}, "required": ["return_values", "log"]}}}'
# ---
# name: test_conditional_state_graph.2
  '''
  {
    "nodes": [
      {
        "id": "__start__",
        "type": "schema",
        "data": "__start__"
      },
      {
        "id": "__end__",
        "type": "schema",
        "data": "__end__"
      },
      {
        "id": "agent",
        "type": "runnable",
        "data": {
          "id": [
            "langchain",
            "schema",
            "runnable",
            "RunnableSequence"
          ],
          "name": "agent"
        }
      },
      {
        "id": "tools",
        "type": "runnable",
        "data": {
          "id": [
            "langgraph",
            "utils",
            "RunnableCallable"
          ],
          "name": "tools"
        }
      }
    ],
    "edges": [
      {
        "source": "__start__",
        "target": "agent"
      },
      {
        "source": "tools",
        "target": "agent"
      },
      {
        "source": "agent",
        "target": "tools",
        "data": "continue",
        "conditional": true
      },
      {
        "source": "agent",
        "target": "__end__",
        "data": "exit",
        "conditional": true
      }
    ]
  }
  '''
# ---
# name: test_conditional_state_graph.3
  '''
  graph TD;
  	__start__ --> agent;
  	tools --> agent;
  	agent -. &nbspcontinue&nbsp .-> tools;
  	agent -. &nbspexit&nbsp .-> __end__;
  
  '''
# ---
# name: test_state_graph_w_config
  '{"title": "LangGraphConfig", "type": "object", "properties": {"configurable": {"$ref": "#/definitions/Configurable"}}, "definitions": {"Configurable": {"title": "Configurable", "type": "object", "properties": {"tools": {"title": "Tools", "type": "array", "items": {"type": "string"}}}}}}'
# ---
